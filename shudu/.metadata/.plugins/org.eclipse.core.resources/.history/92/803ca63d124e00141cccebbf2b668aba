
public class Solver
{	
	private int n=0;			//声明经过优化后的还有的空位
	private int[][] data;		//当前要自动化处理的二维数组的数据
	private int[][] node;     //当前判断对象的坐标集合
	private	int[][] stack;    //当前判断对象可填入数字集合
	private	int[] index;       //当前判断对象的可能值集合下标----------n用来表示每一层的层数,数组对应的数字表示该层的脚标
	private Check check=new Check();
	public Solver(int[][] data,int n){
		this.data=data;
		this.n=n;
		node=new int[n][2];//这里的n要用到初始化后的数据，所以在这里new　对象
		stack=new int[n][9];
		index=new int[n];
		this.initialStack();
	}
	public void initialStack(){//将每个空格里可以填的数据存放到栈中
			
			int po=0;												//----其实这里可以用二维数组来存放一维数组
			for(int i=0;i<9;i++)             //获取所有空位的坐标，
			{
				for(int j=0;j<9;j++)
				{
					if(data[i][j]==0)
					{
						node[po][0]=i;
						node[po][1]=j;
						po++;
					}
				}
			}
			//----------------------------------------下面是用来记录每一解空间层的长度跟该层能填的具体数字
			int[] count=new int[n];    //用来记录具体空位，即每一层解空间可能的值的个数
			int[][] temp=new int[n][];  //借助该二维数组暂时存储每一层解空间具体可能的值
			for(int num=1;num<=9;num++)  
			{
				for(int i=0;i<n;i++)	//对每一层的可能值进行判断
				{
					if(check.boolcheck(data, num, node[i][0], node[i][1]))//------判断该数能否填入该位置
					{
						temp[i][num-1]=1;//表示第i层该数字能填，通过temp暂时存储所有可能值，num-1最大只能到8
						count[i]++;//这样容易记录每一层可能值的个数
					}
				}
			}
			  
			for(int i=0;i<n;i++)          //将chance的1和0代表的可能值转化为具体数字
			{
				stack[i]=new int[count[i]];//count[i]这里表示可填数的个数----这里的层对应二维数组temp中的行
				int p=0;				//表示每一层都要从头开始遍历
				for(int j=0;j<9;j++)
				{
					if(temp[i][j]==1)//如果可以填j+1这个数字
					{
						stack[i][p]=j+1;//j+1表示的是存放的数字，这里表示按层遍历赋值，对每层每个数进行具体的赋值
						p++;//p表示每层能填的数字的个数,这个值不是固定的，跟着循环
					}
				}
			}
	}
	public int[][] checkFull(){
			for(int i=0;i<n;i++)        //通过循环实现回溯法-------------n表示有多少解空间层
			{
				if(i<0)                 //当前判断位置若退回到不可判断处，则无解
				{ 
					
					return null;
				}
				if(index[i]==stack[i].length)        //该位置的所有可能值都无法填入该位置，则返回上一个结点－－－表示每个可能解的长度，即每一层解的长度，说明已经遍历完了该层的数字了
				{
					data[node[i][0]][node[i][1]]=0;    //当前位置设为未赋值-------这里是找到九宫格里的格子，说明未赋值
					index[i]=0;                       //当前结点判断位置归零，以保证下一次查找该处的时候能遍历所有可能值，index 相当于集合的下标
					if(i-1>=0)                           //在上一结点存在的情况下，退回上一结点
						index[i-1]++;//----------------------------i-1表示上一层，表示回到上一层后，继续向右推进
					i=i-2;                               //使循环中的i回到前一位置，达到返回上一结点的效果
					continue;                            //跳出此次循环，进入下一次循环，i自减2，所以下次循环的时候进入上一个结点
				}
				if(check.boolcheck(data, stack[i][index[i]], node[i][0], node[i][1]))    //该可能值可以填入当前判断位置，则给数据赋值
				{
					data[node[i][0]][node[i][1]]=stack[i][index[i]];  //把栈中的数据从小到大的数据试探性的赋给相应的格子，因为是试探性的，所以可以直接赋值，而不需要，再存储     
				}
				else                                     //不可填入时，当前可能值下标向下移一位，使i自减，达到重复运行当前结节的效果，
				{
					index[i]++;
					i--;//---------------------------------保证还在该活结点出，-1是因为循环的时候再加了1
				}
			}  
			return data;

	}
}